/*
 *  Apply Liferay Gradle plugin which will 
 *  - Instruct Bnd to use portalble contracts instead of package dependencies, when possible
 *  - Add a Bnd plugin to analyze the JSPs
 *  - Add a Bnd plugin to analyze i18n resource bundles
 *  - Add a Bnd plugin to analyze SASS/CSS files
 */
apply plugin: "com.liferay.plugin"				

/*
 * Spring's dependency plugin is needed to provide `dependencyManagement` functionality
 * used to configure Liferay Portal's BOM (Biil Of Material)
 */
apply plugin: "io.spring.dependency-management"


/*
 * Configure plugins 
 */
buildscript {
	ext {
		bndVersion = '4.2.0'
		dependencyManagementVersion = '1.0.8.RELEASE'
		liferayGradlePluginVersion = '4.2.0'
		portalVersion = '7.1.3'
		portletApiVersion = '3.0.0'
		serviceComponentAnnotationsVersion = '1.3.0'
		servletApiVersion = '3.0.1'
	}

	dependencies {
		classpath "biz.aQute.bnd:biz.aQute.bnd:${bndVersion}"
		classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:${bndVersion}"
		classpath "biz.aQute.bnd:biz.aQute.bndlib:${bndVersion}"
		classpath(group: "com.liferay", name: "com.liferay.gradle.plugins", version: "${liferayGradlePluginVersion}") {
			exclude group: "biz.aQute.bnd", module: "biz.aQute.bnd"
			exclude group: "biz.aQute.bnd", module: "biz.aQute.bnd.gradle"
			exclude group: "biz.aQute.bnd", module: "biz.aQute.bndlib"
		}
		classpath "io.spring.gradle:dependency-management-plugin:${dependencyManagementVersion}"
	}

	repositories {
		maven {
			url "https://repository-cdn.liferay.com/nexus/content/groups/public"
			url "https://plugins.gradle.org/m2/"
		}
	}
}

/*
 * Repositories for project depenedencies
 */
repositories {
	maven {
		url "https://repository-cdn.liferay.com/nexus/content/groups/public"
	}
}

/* 
 * Use the BOM provided for given Liferay Portal version
 * This allows to automatically set proper versions for dependencies
 */
dependencyManagement {
    imports {
        mavenBom("com.liferay.portal:release.portal.bom:${portalVersion}")
    }
}

/*
 * Project dependencies
 */
dependencies {
	compileOnly "com.liferay.portal:com.liferay.portal.kernel"		// version will be taken from BOM
	compileOnly "com.liferay.portal:com.liferay.util.taglib"		// version will be taken from BOM
	compileOnly "javax.portlet:portlet-api:${portletApiVersion}"
	compileOnly "javax.servlet:javax.servlet-api:${servletApiVersion}"
	compileOnly "org.osgi:org.osgi.service.component.annotations:${serviceComponentAnnotationsVersion}"

	// Include the apache-poi-ooxml dependency in the resulting artifact.
	// With compileInclude, Liferay's gradle plugin will take care of embeding all the
	// transitive dependencies inside a lib folder within the final jar.
	// See https://portal.liferay.dev/docs/7-1/tutorials/-/knowledge_base/t/adding-third-party-libraries-to-a-module#embedding-libraries-in-a-module
	compileInclude "org.apache.poi:poi-ooxml:4.1.0"
}


/*
 * Set the jar name to ensure it's the same accross all builds
 */
jar.baseName = 'com.liferay.code.samples.portal.modules.applications.portlets.resource-command-portlet'
